{"version":3,"file":"static/js/881.3a6bde58.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/comma-separated-tokens/index.js","../node_modules/devlop/lib/default.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","__importDefault","require","parse","tokens","input","String","index","indexOf","token","stringify","values","settings","join","padRight","padLeft","ok","unreachable","factorySpace","effects","max","limit","Number","POSITIVE_INFINITY","size","code","markdownSpace","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","Schema","normal","space","merge","definitions","assign","own","create","definition","properties","info","DefinedInfo","transform","attributes","mustUseProperty","includes","normalize","attribute","xlink","_","toLowerCase","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","booleanish","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","number","ariaColIndex","ariaColSpan","ariaControls","spaceSeparated","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","commaSeparated","acceptCharset","accessKey","action","allow","allowFullScreen","boolean","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","overloadedBoolean","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","commaOrSpaceSeparated","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","Info","rest","camelcase","toUpperCase","dashes","kebab","$0","checks","keys","types","super","mark","check","defined","powers","increment","nameRe","nameReJsx","emptyOptions","jsx","empty","hastToReact","StyleToObject","pointEnd","point","pointStart","undefined","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","isNaN","commas","spaces","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","constructs","existing","before","add","tokenize","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","nok","disable","null","blankLine","partial","after","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","called","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","visit","testOrVisitor","visitorOrReverse","maybeReverse","visitor","visitParents","parents","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","convert","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","factory","subresult","grandparents","toResult","nodeAsParent"],"sourceRoot":""}