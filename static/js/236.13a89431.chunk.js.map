{"version":3,"file":"static/js/236.13a89431.chunk.js","mappings":"iLAIA,MAkBA,EAlBaA,IAAA,IAAC,KAAEC,GAAMD,EAAA,OACpBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAAD,SAAKH,EAAKK,SACVD,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,EAAKM,WACTF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAE,SAAAC,OAAWT,EAAKU,IAAKP,SAAC,gBAC1B,ECwBR,EA9BqBQ,KACnB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,KAE7CG,EAAAA,EAAAA,YAAU,KAERC,MAAM,uBACHC,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IACLT,EAASS,GACTN,EAAc,IAAI,IAAIO,IAAID,EAAKE,KAAKxB,GAASA,EAAKyB,aAAY,GAC9D,GACH,IAEH,MAAMC,EAAoBD,GAAab,EAAMe,QAAQ3B,GAASA,EAAKyB,WAAaA,IAEhF,OACErB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1BY,EAAWS,KAAKC,IACfxB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKsB,IACJC,EAAiBD,GAAUD,KAAKxB,IAC/BI,EAAAA,EAAAA,KAACwB,EAAI,CAAe5B,KAAMA,GAAfA,EAAKU,QAHVe,MAOR,E,ySCZV,EAZkBI,KAChBzB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SACxB2B,EAAUN,KAAKxB,IACdC,EAAAA,EAAAA,MAAA,OAAmBC,UAAU,eAAcC,SAAA,EACzCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKH,EAAKK,SACVD,EAAAA,EAAAA,KAAA,KAAAD,SAAIH,EAAKM,WACTF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAE,SAAAC,OAAWT,EAAKU,IAAKP,SAAC,gBAHtBH,EAAKU,QCDfqB,EAAW,CACfpB,aAAcA,KAAMP,EAAAA,EAAAA,KAACO,EAAY,IACjCkB,UAAWA,KAAMzB,EAAAA,EAAAA,KAACyB,EAAS,KAkC7B,EA/BcG,KACZ5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAI,CACH5B,MAAM,QACN6B,YAAY,gBAAe/B,UAE3BF,EAAAA,EAAAA,MAAA,WAASC,UAAU,OAAOQ,GAAG,QAAOP,SAAA,EAClCC,EAAAA,EAAAA,KAAA,UAAAD,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACC,GAAG,SAAQL,SAAC,aAEpBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAC5BgC,OAAOC,KAAKL,GAAUP,KAAKa,IAC1BpC,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGkC,KAAI,IAAA7B,OAAM4B,EAAIE,eAAgBpC,SAAEkC,IAAQ,MADpCA,YAShBF,OAAOK,QAAQT,GAAUP,KAAIzB,IAAA,IAAE0C,EAAMC,GAAQ3C,EAAA,OAC5CE,EAAAA,EAAAA,MAAA,WAAoBS,GAAI+B,EAAKF,cAAcpC,SAAA,EACzCC,EAAAA,EAAAA,KAACsC,EAAO,IAAG,MADCD,EAEJ,Q","sources":["components/Posts/Post/Post.js","components/Posts/Compilations.js","components/Posts/PostsList.js","pages/Posts.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst Post = ({ post }) => (\n  <div className=\"post\">\n    <h2>{post.title}</h2>\n    <p>{post.excerpt}</p>\n    <Link to={`/post/${post.id}`}>Read More</Link>\n  </div>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    excerpt: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    category: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Post;\n","import React, { useState, useEffect } from 'react';\nimport Post from './Post/Post';\n\nconst Compilations = () => {\n  const [posts, setPosts] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    // Fetch posts\n    fetch('/path-to-posts.json')\n      .then((response) => response.json())\n      .then((data) => {\n        setPosts(data);\n        setCategories([...new Set(data.map((post) => post.category))]);\n      });\n  }, []);\n\n  const filterByCategory = (category) => posts.filter((post) => post.category === category);\n\n  return (\n    <div className=\"compilations\">\n      {categories.map((category) => (\n        <div key={category}>\n          <h3>{category}</h3>\n          {filterByCategory(category).map((post) => (\n            <Post key={post.id} post={post} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Compilations;\n","// PostsList.js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport postsData from '../../data/posts/posts.json'; // Import the JSON data\n\nconst PostsList = () => (\n  <div className=\"posts-list\">\n    {postsData.map((post) => (\n      <div key={post.id} className=\"post-preview\">\n        <h2>{post.title}</h2>\n        <p>{post.excerpt}</p>\n        <Link to={`/post/${post.id}`}>Read More</Link>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PostsList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Main from '../layouts/Main';\nimport Compilations from '../components/Posts/Compilations';\nimport PostsList from '../components/Posts/PostsList';\n\n// NOTE: sections are displayed in order defined.\nconst sections = {\n  Compilations: () => <Compilations />,\n  PostsList: () => <PostsList />,\n};\n\nconst Posts = () => (\n  <Main\n    title=\"Posts\"\n    description=\"Various Posts\"\n  >\n    <article className=\"post\" id=\"posts\">\n      <header>\n        <div className=\"title\">\n          <h2>\n            <Link to=\"/posts\">Posts</Link>\n          </h2>\n          <div className=\"link-container\">\n            {Object.keys(sections).map((sec) => (\n              <h4 key={sec}>\n                <a href={`#${sec.toLowerCase()}`}>{sec}</a> {/* Scroll to section */}\n              </h4>\n            ))}\n          </div>\n        </div>\n      </header>\n\n      {/* Render the sections in order */}\n      {Object.entries(sections).map(([name, Section]) => (\n        <section key={name} id={name.toLowerCase()}>\n          <Section /> {/* Render the component for each section */}\n        </section>\n      ))}\n    </article>\n  </Main>\n);\n\nexport default Posts;\n"],"names":["_ref","post","_jsxs","className","children","_jsx","title","excerpt","Link","to","concat","id","Compilations","posts","setPosts","useState","categories","setCategories","useEffect","fetch","then","response","json","data","Set","map","category","filterByCategory","filter","Post","PostsList","postsData","sections","Posts","Main","description","Object","keys","sec","href","toLowerCase","entries","name","Section"],"sourceRoot":""}